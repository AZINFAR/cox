//*****************************************************************************
//
//!
//! \defgroup TEL0026
//!
//! \brief This is the TEL0026 Bluetooth module driver.
//! 
//! TEL0026 is a CuteDigi Bluetooth to UART module uses CSR BlueCore4- External chipsets.
//! The generation Bluetooth UART module has two working mode: AT command mode, and 
//! automatic binding transparent data mode.In automatic binding data transparent mode,
//! it can be configured to Master, Slave or Loopback three different modes, and it will
//! connect to or be connected by other devices that support SPP protocol per configuration.
//! In AT command mode , user can configure the module and send control commands. By
//! controlling logical level of IO pin PIO11, user can switch the working modes between 
//! AT command mode and transparent data mode.
//!
//! <h1>Contents</h1>
//! - \ref TEL0026_Pins
//! - \ref Bluetooth_Bee_Pins
//! - \ref Bluetooth_Bee_Config
//! .
//!
//! \section TEL0026_Pins 1. TEL0026 Pins
//! <img src="TEL0026_Pins.png" />
//!
//! \section Bluetooth_Bee_Pins 2. Bluetooth Bee Pins
//! <img src="Bluetooth_Bee_Pins.png" />
//!
//! \section Bluetooth_Bee_Config 3. Bluetooth Bee Config
//! The device should be configured first before use, following steps:
//! Entering AT Mode:
//! 1.Using Arduino Serial Terminal and USB Xbee converter or a USB to RS232 converter
//! 2.Place the module into AT Mode while powered off. Apply power to it and open the 
//!   corresponding com port in Arduino IDE's serial terminal. Set the Baud rate to 
//!   38400 and the setting next to that to "both NL & CR". You should now be able to 
//!   send AT commands to the Bluetooth bee and do the configurations.
//! .
//!
//!
//! \defgroup TEL0026_Driver_Single  
//!  
//! \brief This is the TEL0026 Driver can be used in the condition which
//! the system only have one TEL0026 series device.
//!
//! This driver is implemented by using defines and global variables.It can only 
//! use on one device because all the APIs use the some macros and global variables.
//!
//! <h1>Contents</h1>
//! - \ref TEL0026_How_Define
//! - \ref TEL0026_API_Group
//!   - \ref TEL0026_API_Group_ConfigGet
//!   - \ref TEL0026_API_Group_ConfigSet
//!   - \ref TEL0026_API_Group_Special
//!   .
//! - \ref TEL0026_Usage 
//! .
//!
//! \section TEL0026_How_Define 1. How is the TEL0026 Driver implemented?
//! Use define to config some Fixing things,such as SPI base and SPI pins
//! CS pin,use hold input or not,use write protect or not and which device
//! to use(This contains chip information).
//!
//! Use global variables to save variables use by the APIs.
//!
//! \section TEL0026_API_Group 2. API Groups
//! 
//! The TEL0026 API is broken into three groups of functions: 
//! - those that deal with TEL0026 config param get, 
//! - those that deal with TEL0026 config param set, 
//! - those that deal with TEL0026 Other function.
//! .
//!
//! \n
//! \subsection TEL0026_API_Group_ConfigGet 2.1 TEL0026 Get Config Parameter APIs
//! 
//! The TEL0026 get config function is implemented by :
//! - BTUartParamGet() 
//! - BTVersionGet() 
//! - BTPasswordGet() 
//! - BTDeviceRoleGet() 
//! - BTDeviceNameGet() 
//! - BTDeviceTypeGet() 
//! - BTInqModeGet() 
//! - BTStatusGet() 
//! - BTDeviceAddrGet() 
//! - BTRemoteDeviceNameGet() 
//! .
//!
//! \n
//! \subsection TEL0026_API_Group_ConfigSet 2.2 TEL0026 Set Config Parameter APIs
//! 
//! The TEL0026 Config Parameter is set by :
//! - BTUartParamSet() 
//! - BTPasswordSet() 
//! - BTDeviceNameSet() 
//! - BTDeviceRoleSet() 
//! - BTDeviceTypeSet() 
//! - BTInqModeSet() 
//! .
//!
//! \n
//! \subsection TEL0026_API_Group_Other 2.3 TEL0026 Other functions APIs
//! 
//! The TEL0026 chip information is get by :
//! - BTTestOK() 
//! - BTRestore() 
//! - BTInqCancle() 
//! - BTPairing() 
//! - BTLocateAuthDevice()
//! - BTDeviceConnect()
//! - BTDeviceDisConnect()
//! - BTAutoConnect()
//! - BTSingleIOControl()
//! - BTWaitForConnect()
//! - BTInit()
//! .
//!
//! \section TEL0026_Usage 1. Usage & Program Examples
//! 
//! \code
//!//*****************************************************************************
//!//
//!//! \file Example.c
//!//! \brief the TEL0026 Example.
//!//! \version 1.0
//!//! \date 10/15/2011
//!//! \author CooCox
//!//! \copy
//!//!
//!//! Copyright (c)  2011, CooCox 
//!//! All rights reserved.
//!//! 
//!//! Redistribution and use in source and binary forms, with or without 
//!//! modification, are permitted provided that the following conditions 
//!//! are met: 
//!//! 
//!//!     * Redistributions of source code must retain the above copyright 
//!//! notice, this list of conditions and the following disclaimer. 
//!//!     * Redistributions in binary form must reproduce the above copyright
//!//! notice, this list of conditions and the following disclaimer in the
//!//! documentation and/or other materials provided with the distribution. 
//!//!     * Neither the name of the <ORGANIZATION> nor the names of its 
//!//! contributors may be used to endorse or promote products derived 
//!//! from this software without specific prior written permission. 
//!//! 
//!//! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//!//! AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
//!//! IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//!//! ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
//!//! LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
//!//! CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
//!//! SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//!//! INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
//!//! CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
//!//! ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
//!//! THE POSSIBILITY OF SUCH DAMAGE.
//!//*****************************************************************************
//!#include "xhw_types.h"
//!#include "xhw_ints.h"
//!#include "xhw_memmap.h"
//!#include "xhw_gpio.h"
//!#include "xhw_nvic.h"
//!#include "xcore.h"
//!#include "xsysctl.h"
//!#include "xuart.h"
//!#include "xgpio.h"
//!#include "hw_TEL0026.h"
//!#include "TEL0026.h"
//!
//!#define CMD_DELAY   1000000
//!//*****************************************************************************
//!//
//!//! \brief Debug information output UART1 port initialization
//!//
//!//! \param ulBaudRate The baud rate of UART.
//!//
//!// This function is to get initialized for debug information output UART1
//!//
//!//! \return None.
//!//
//!//*****************************************************************************
//!void DebugUartInit(unsigned long ulBaudRate)
//!{
//!	xSysCtlPeripheralEnable(xGPIOSPinToPeripheralId(PA9));
//!	xSysCtlPeripheralEnable(xGPIOSPinToPeripheralId(PA10));
//!
//!	xSysCtlPeripheralEnable2(xUART1_BASE);
//!
//!    xUARTConfigSet(xUART1_BASE, ulBaudRate, (xUART_CONFIG_WLEN_8 |
//!                   xUART_CONFIG_STOP_1 |
//!                   xUART_CONFIG_PAR_NONE));
//!    xUARTEnable(xUART1_BASE, (xUART_BLOCK_UART | xUART_BLOCK_TX | xUART_BLOCK_RX));
//!    xSysCtlPeripheralEnable(SYSCTL_PERIPH_AFIO);
//!    xSPinTypeUART(UART1TX, PA9);
//!}
//!
//!//*****************************************************************************
//!//
//!//! \brief Debug string output
//!//
//!//! \param pStr The string to display
//!//
//!// This function is to print string through UART
//!//
//!//! \return None.
//!//
//!//*****************************************************************************
//!void DebugUartPrintStr(char *pStr)
//!{
//!	while(*pStr != 0)
//!	{
//!	    xUARTCharPut(xUART1_BASE, *pStr++);
//!	}
//!}
//!
//!//*****************************************************************************
//!//
//!//! \brief Debug data output
//!//
//!//! \param ulLength Specifies how many data bytes to put
//!//! \param pData The data buffer to display
//!//
//!// This function is to print string through UART
//!//
//!//! \return None.
//!//
//!//*****************************************************************************
//!void DebugUartPutData(unsigned long ulLength, unsigned char *pData)
//!{
//!	while(ulLength--)
//!	{
//!	    xUARTCharPut(xUART1_BASE, *pData++);
//!	}
//!}
//!
//!#define EXAM_BUFFER_SIZE    128
//!//
//!// Data buffer
//!//
//!char Buffer[EXAM_BUFFER_SIZE];
//!
//!//*****************************************************************************
//!//
//!//! \brief Bluetooth SD example
//!//
//!//! \param None
//!//
//!// This example will do the following things:
//!//    Initialize TEL0026 bluetooth module and get its configuration parameter.
//!// Then it will search for nearby bluetooth devices and connect to recently
//!// connected device like a PC or another bluetooth module. After connected, a
//!// wireless serial connection is set up. If connection failed, the Bluetooth 
//!// will enter into slave mode and wait for connection.
//!//
//!//! \return None.
//!//
//!//*****************************************************************************
//!void BTSDExample(void)
//!{
//!	xSysCtlClockSet(72000000,  xSYSCTL_OSC_MAIN | xSYSCTL_XTAL_8MHZ);
//!	DebugUartInit(115200);
//!	BTInit();
//!
//!	BTUartParamGet(Buffer);
//!	DebugUartPrintStr("\r\nTEL0026 UART parameter:");
//!	DebugUartPrintStr(Buffer);
//!
//!	if(BTUartParamSet(115200,0,0) != BT_ERR_OK)
//!	{
//!		DebugUartPrintStr("\r\nTEL0026 UART parameter set failed!\r\n");
//!	}
//!	else
//!	{
//!		DebugUartPrintStr("\r\nTEL0026 UART parameter set success!\r\n");
//!	}
//!
//!	DebugUartPrintStr("\r\nTEL0026 Bluetooth Name: ");
//!	BTDeviceNameGet(Buffer);
//!	DebugUartPrintStr(Buffer);
//!
//!	DebugUartPrintStr("\r\nTEL0026 Bluetooth Address: ");
//!	BTDeviceAddrGet(Buffer);
//!	DebugUartPrintStr(Buffer);
//!
//!	DebugUartPrintStr("\r\nTEL0026 Bluetooth Password: ");
//!	BTPasswordGet(Buffer);
//!	DebugUartPrintStr(Buffer);
//!
//!	DebugUartPrintStr("\r\nTEL0026 Bluetooth SoftWare Version: ");
//!	BTVersionGet(Buffer);
//!	DebugUartPrintStr(Buffer);
//!
//!	DebugUartPrintStr("\r\nConnect to BT:...");
//!	//if(BTDeviceConnect("12,2,107597")==BT_ERR_OK)
//!	if(BTAutoConnect() == BT_ERR_OK)
//!	{
//!		DebugUartPrintStr("\r\nConnected.");
//!	}
//!
//!	else
//!	{
//!		DebugUartPrintStr("\r\nConnection Failed.");
//!	}
//!
//!	//
//!	// Set Bluetooth to slave mode and wait for connection.
//!	//
//!	BTDeviceRoleSet(BT_ROLE_SLAVE);
//!	xSysCtlDelay(1000000);
//!	BTWaitForConnect();
//!}
//!
//! \endcode
//!
//
//*****************************************************************************